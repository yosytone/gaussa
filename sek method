#include <iostream>

using namespace std;

float f(double x) //возвращает значение функции f(x) = x^2-2
{
    return x * x - 2;
}

float df(float x) //возвращает значение производной
{
    return 2 * x;
}

float d2f(float x) // значение второй производной
{
    return 2;
}

int main()

{
    setlocale(LC_ALL, "Russian");
    int exit = 0, i = 0;//переменные для выхода и цикла
    double x0, xn;// вычисляемые приближения для корня
    double a, b, eps = 0.000001;// границы отрезка и необходимая точность
    i = 0;

    cout << "Введите x0 и x1\n";
    cin >> a >> b; // вводим границы отрезка, на котором будем искать корень


    if (a > b) // если пользователь перепутал границы отрезка, меняем их местами

    {
        x0 = a;
        a = b;
        b = x0;

    }

    if (f(a) * f(b) > 0) // если знаки функции на краях отрезка одинаковые, то здесь нет корня

        cout << "\nError! No roots in this interval\n";

    else

    {

        if (f(a) * d2f(a) > 0) x0 = a; // для выбора начальной точки проверяем f(x0)*d2f(x0)>0 ?
        else x0 = b;
        xn = x0 - f(x0) / df(x0); // считаем первое приближение

        cout << ++i << "-th iteration = " << xn << "\n";

        while (fabs(x0 - xn) > eps) // пока не достигнем необходимой точности, будет продолжать вычислять

        {

            x0 = xn;

            xn = x0 - f(x0) / df(x0); // непосредственно формула Ньютона

            cout << ++i << "-th iteration = " << xn << "\n";

        }

        cout << "\nRoot = " << xn; // вывод вычисленного корня

        //cout << endl << fabs(x0 - xn) << endl;

    }
    return 0;
}
